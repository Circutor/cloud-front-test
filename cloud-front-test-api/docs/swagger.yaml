basePath: /
definitions:
  model.Bookmark:
    properties:
      buildingId:
        type: string
      createdAt:
        description: User       User
        type: string
      id:
        type: integer
      updatedAt:
        type: string
      userID:
        type: integer
    type: object
  model.Building:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  model.BuildingData:
    properties:
      timestamp:
        type: string
      value:
        type: number
    type: object
  model.User:
    properties:
      bookmarks:
        items:
          $ref: '#/definitions/model.Bookmark'
        type: array
      createdAt:
        type: string
      email:
        type: string
      password:
        type: string
      token:
        type: string
      updatedAt:
        type: string
    type: object
  model.UserSignup:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  model.addBookmark:
    properties:
      buildingId:
        type: string
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server for the Frontend TEST API.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Circutor Frontend TEST API
  version: "1.0"
paths:
  /buildings:
    get:
      consumes:
      - application/json
      description: List all Buildings
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Building'
            type: array
      summary: ListBuildings
  /buildings/{id}/{period}:
    get:
      consumes:
      - application/json
      description: Returns data from a specific building
      parameters:
      - description: Building ID
        in: path
        name: id
        required: true
        type: string
      - description: Start date YYYY-MM-DD
        in: query
        name: start
        type: string
      - description: End date YYYY-MM-DD
        in: query
        name: end
        type: string
      - description: Data aggeration period
        enum:
        - hourly
        - daily
        in: path
        name: period
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.BuildingData'
            type: array
      summary: Building Data
  /login:
    post:
      consumes:
      - application/json
      description: Login a user
      parameters:
      - description: user signup
        in: body
        name: user
        schema:
          $ref: '#/definitions/model.UserSignup'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
      summary: Login
  /signup:
    post:
      consumes:
      - application/json
      description: Register a a user
      parameters:
      - description: user signup
        in: body
        name: user
        schema:
          $ref: '#/definitions/model.UserSignup'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
      summary: Signup
  /user/bookmarks:
    get:
      consumes:
      - application/json
      description: List Bookmarks from user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Bookmark'
      summary: ListBookmarks
    post:
      consumes:
      - application/json
      description: Add a bookmar to a user
      parameters:
      - description: user signup
        in: body
        name: user
        schema:
          $ref: '#/definitions/model.addBookmark'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Bookmark'
      summary: Add Bookmark
  /user/bookmarks/{id}:
    delete:
      description: Delete a bookmark from a user
      parameters:
      - description: Bookmark ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ""
      summary: Delete Bookmark
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization.
    type: apiKey
swagger: "2.0"
